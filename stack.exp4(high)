#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define BLANK ' '
#define TAB '\t'
#define MAX 50

void push(long int symbol);
long int pop();
void infix_to_postfix();
long int eval_post();
int priority(char symbol);
int isEmpty();
int white_space(char);

char infix[MAX], postfix[MAX];
long int stack[MAX];
int top;

int main() {
    long int value;
    top = -1;

    printf("Enter infix : ");
    fgets(infix, MAX, stdin);
    infix[strcspn(infix, "\n")] = '\0'; // remove newline

    infix_to_postfix();
    printf("Postfix : %s\n", postfix);

    value = eval_post();
    printf("Value of expression : %ld\n", value);

    return 0;
}

/* Convert infix to postfix */
void infix_to_postfix() {
    unsigned int i, p = 0;
    char next, symbol;

    for (i = 0; i < strlen(infix); i++) {
        symbol = infix[i];
        if (!white_space(symbol)) {
            switch (symbol) {
                case '(':
                    push(symbol);
                    break;
                case ')':
                    while ((next = pop()) != '(')
                        postfix[p++] = next;
                    break;
                case '+':
                case '-':
                case '*':
                case '/':
                case '%':
                case '^':
                    while (!isEmpty() &&
                           (priority(stack[top]) > priority(symbol) ||
                            (priority(stack[top]) == priority(symbol) && symbol != '^')))
                        postfix[p++] = pop();
                    push(symbol);
                    break;
                default: /* operand */
                    postfix[p++] = symbol;
            }
        }
    }
    while (!isEmpty())
        postfix[p++] = pop();
    postfix[p] = '\0';
}

/* Return priority of operator */
int priority(char symbol) {
    switch (symbol) {
        case '(':
            return 0;
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
        case '%':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

void push(long int symbol) {
    if (top >= MAX - 1) {
        printf("Stack overflow\n");
        exit(1);
    }
    stack[++top] = symbol;
}

long int pop() {
    if (isEmpty()) {
        printf("Stack underflow\n");
        exit(1);
    }
    return (stack[top--]);
}

int isEmpty() {
    return (top == -1);
}

int white_space(char symbol) {
    return (symbol == BLANK || symbol == TAB);
}

long int eval_post() {
    long int a, b, temp, result;
    unsigned int i;

    for (i = 0; i < strlen(postfix); i++) {
        if (postfix[i] >= '0' && postfix[i] <= '9')
            push(postfix[i] - '0');
        else {
            a = pop();
            b = pop();
            switch (postfix[i]) {
                case '+': temp = b + a; break;
                case '-': temp = b - a; break;
                case '*': temp = b * a; break;
                case '/': temp = b / a; break;
                case '%': temp = b % a; break;
                case '^': temp = pow(b, a); break;
                default:
                    printf("Invalid operator %c\n", postfix[i]);
                    exit(1);
            }
            push(temp);
        }
    }
    result = pop();
    return result;
}
____________________________________________________________________________________
OUTPUT:
Enter infix : (2+3)*4
Postfix : 23+4*
Value of expression : 20
